AWSTemplateFormatVersion: 2010-09-09
Description: Provision docker image in an ecs fargate service.

Parameters:
  ProjectName:
    Type: String
    Description: Name of this project
  RunEnvironment:
    Type: String
    Description: The service environment for the project. e.g. dev, qa, prod
  ProjectRepository:
    Type: String
    Description: Name of codecommit repo for project
  ProjectBranch:
    Type: String
    Description: The branch of the project repository this pipeline will monitor
    Default: master
  EcrRepository:
    Type: String
    Description: URI of the ECR repo where to push the newly built docker image
  DockerDir:
    Type: String
    Description: Directory where the Dockerfile lives relative to project root
    Default: docker
  Dockerfile:
    Type: String
    Description: Name of Dockerfile used to build new docker image
    Default: Dockerfile
  SceptreDir:
    Type: String
    Description: Directory where to find sceptre project
    Default: aws/sceptre
  BuildSpecDir:
    Type: String
    Description: Directory where to find codebuild buildspec and scripts
    Default: aws/codebuild
  StageDockerImageBuildSpec:
    Type: String
    Description: The codebuild buildspec file for the StageDockerImage build stage
    Default: buildspec-stage_docker_image.yaml
  DeployDockerImageBuildSpec:
    Type: String
    Description: The codebuild buildspec file for the StageDockerImage build stage
    Default: buildspec-deploy_docker_image.yaml
  CodeBuildImageStageDocker:
    Type: String
    Description: Docker image to use for CodeBuild container during StageDockerImage build stage
    # CF http://amzn.to/2mjCI91 for reference
    Default: docker:17.09.0
  CodeBuildImageDeployDocker:
    Type: String
    Description: Docker image to use for CodeBuild container during DeployDockerImage build stage
    Default: python:3.5.2

Resources:
  PipelineArtifactsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain

  PipelineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub PipelineExecutionRole-${AWS::StackName}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: codepipeline.amazonaws.com
      Path: /
      Policies:
        - PolicyName: CodePipelineS3ArtifactAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: CodePipelineS3ArtifactAccess
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                  - s3:PutObject
                Resource:
                  - !Sub 'arn:aws:s3:::${PipelineArtifactsBucket}'
                  - !Sub 'arn:aws:s3:::${PipelineArtifactsBucket}/*'
              - Sid: CodePipelineGitRepoAccess
                Effect: Allow
                Action:
                  - codecommit:GetBranch
                  - codecommit:GetCommit
                  - codecommit:UploadArchive
                  - codecommit:GetUploadArchiveStatus
                  - codecommit:CancelUploadArchive
                Resource: '*'
              - Sid: CodePipelineBuildAccess
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:StopBuild
                  - codebuild:BatchGetBuilds
                Resource:
                  - !GetAtt CodeBuildStageDockerImage.Arn
                  - !GetAtt CodeBuildDeployDockerImage.Arn
              - Sid: CodePipelinePassRoleAccess
                Effect: Allow
                Action: iam:PassRole
                Resource: !GetAtt CodeBuildServiceRole.Arn

  CodeBuildSceptreDeployRole:
    # this baby has to grant access to everything sceptre touches
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub CodeBuildSceptreDeployRole-${AWS::StackName}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: codebuild.amazonaws.com
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  CodeBuildServiceRole:
    # Allows Codebuild to stage docker image on ECR repositories
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub CodeBuildServiceRole-${AWS::StackName}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: codebuild.amazonaws.com
      Path: /
      Policies:
        - PolicyName: CodeBuildAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: CodeBuild2S3
                Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                  - s3:GetBucketVersioning
                Resource:
                  - !Sub 'arn:aws:s3:::${PipelineArtifactsBucket}'
                  - !Sub 'arn:aws:s3:::${PipelineArtifactsBucket}/*'
              - Sid: CodeBuild2CloudWatch
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Sid: CodeBuild2Ecr
                Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:GetAuthorizationToken
                  - ecr:UploadLayerPart
                  - ecr:BatchDeleteImage
                  - ecr:ListImages
                  - ecr:PutImage
                  - ecr:BatchGetImage
                  - ecr:CompleteLayerUpload
                  - ecr:DescribeImages
                  - ecr:DescribeRepositories
                  - ecr:InitiateLayerUpload
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetRepositoryPolicy
                Resource: '*'
              #- Sid: CodeBuild2CFN
              #  Effect: Allow
              #  Action:
              #    - cloudformation:CreateChangeSet
              #    - cloudformation:CreateStack
              #    - cloudformation:CreateUploadBucket
              #    - cloudformation:DeleteStack
              #    - cloudformation:Describe*
              #    - cloudformation:List*
              #    - cloudformation:UpdateStack
              #    - cloudformation:ValidateTemplate
              #    - cloudformation:ExecuteChangeSet
              #  Resource: '*'
              - Sid: CodeBuild2CodePipeline
                Effect: Allow
                Action:
                  - codecommit:ListBranches
                  - codecommit:ListRepositories
                  - codecommit:BatchGetRepositories
                  - codecommit:Get*
                  - codecommit:GitPull
                  - codecommit:UploadArchive
                  - codepipeline:GetPipelineState
                Resource: '*'

  CodeBuildStageDockerImage:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub StageDockerImage-${AWS::StackName}
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: !Sub aws/codebuild/${CodeBuildImageStageDocker}
        EnvironmentVariables:
          - Name: BUILDSPEC_DIR
            Value: !Ref BuildSpecDir
          - Name: REPOSITORY_URI
            Value: !Ref EcrRepository
          - Name: SERVICE_NAME
            Value: !Ref ProjectName
          - Name: GIT_REMOTE
            Value: !Sub https://git-codecommit.${AWS::Region}.amazonaws.com/v1/repos/${ProjectRepository}
          - Name: GIT_BRANCH
            Value: !Ref ProjectBranch
          - Name: DOCKER_DIR
            Value: !Ref DockerDir
          - Name: DOCKERFILE
            Value: !Ref Dockerfile
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub ${BuildSpecDir}/${StageDockerImageBuildSpec}
      TimeoutInMinutes: 30

  CodeBuildDeployDockerImage:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub DeployDockerImage-${AWS::StackName}
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: !Sub aws/codebuild/${CodeBuildImageDeployDocker}
        EnvironmentVariables:
          - Name: SCEPTRE_DIR
            Value: !Ref SceptreDir
          - Name: BUILDSPEC_DIR
            Value: !Ref BuildSpecDir
          - Name: ENVIRONMENT
            Value: !Ref RunEnvironment
          - Name: SERVICE_NAME
            Value: !Ref ProjectName
      ServiceRole: !GetAtt CodeBuildSceptreDeployRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub ${BuildSpecDir}/${DeployDockerImageBuildSpec}
        #BuildSpec: !Sub ${DeployDockerImageBuildSpec}
      TimeoutInMinutes: 30

  FargatePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub FargatePipeline-${ProjectName}
      RoleArn: !GetAtt PipelineExecutionRole.Arn
      ArtifactStore:
        Location: !Ref PipelineArtifactsBucket
        Type: S3
      Stages:
        - Name: Source
          Actions:
            - Name: ProjectSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: 1
              Configuration:
                BranchName: !Ref ProjectBranch
                RepositoryName: !Ref ProjectRepository
              OutputArtifacts:
                - Name: ProjectSource
        - Name: StageDockerImage
          Actions:
            - Name: StageImage
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              InputArtifacts:
                - Name: ProjectSource
              OutputArtifacts:
                - Name: StageDockerImageOutputs
              Configuration:
                ProjectName: !Ref CodeBuildStageDockerImage
              RunOrder: '1'
        - Name: DeployDockerImage
          Actions:
            - Name: DeployImage
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              InputArtifacts:
                #- Name: ProjectSource
                - Name: StageDockerImageOutputs
              #OutputArtifacts:
              #  - Name: DockerBuildOutputs
              Configuration:
                ProjectName: !Ref CodeBuildDeployDockerImage
              RunOrder: '2'

Outputs:
  PipelineArtifactsBucket:
    Description: CodePipeline Artifacts S3 Bucket
    Value: !Ref PipelineArtifactsBucket
  FargatePipeline:
    Description: ECS Fargate service CodePipeline
    Value: !Ref FargatePipeline
